# MIT License
#
# Copyright (c) 2022 David Schall and EASE Lab
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: Create base disk image

env:
  ARTIFACTS_DIR: artifacts/
  KERNEL: artifacts/kernel
  DISK_PRE_TEST: artifacts/disk-image.qcow2
  DISK_FINAL: artifacts/disk.qcow2
  CHECKSUMS: artifacts/checksums
  CLIENT: artifacts/test-client

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  schedule:
    - cron: "0 7 * * 1"

  push:
    branches: [main]
    paths:
      - "test/**"
      - "setup/disk.Makefile"
      - "configs/disk-image-configs/**"

  pull_request:
    branches: [main]
    paths:
      - "test/**"
      - "setup/disk.Makefile"
      - "configs/disk-image-configs/**"

jobs:

#########################################
### Install the OS on the new disk image

  install-base-image:
    name: Build Base image with Ubuntu
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        ubuntu-version: [ focal, jammy ]
        arch: [ amd64, arm64 ]
        include:
          - arch: amd64
            makefile: setup/disk.Makefile
          - arch: arm64
            makefile: setup/disk_arm.Makefile
    env:
      WORKDIR: setup/
      MAKEFILE: ${{ matrix.makefile }}
      BUILD_DIR: wkdir/
      UBUNTU_VERSION: ${{ matrix.ubuntu-version }}
      ARCH: ${{ matrix.arch }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4


      - name: Cache base disk installation
        id: base-disk
        uses: actions/cache@v4
        with:
          path: artifacts/
          key: ${{ runner.os }}-${{ github.sha }}-${{ matrix.ubuntu-version }}-${{ matrix.arch }}-base-disk

      - name: Setup the artifacts dir
        if: steps.base-disk.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.ARTIFACTS_DIR }}

      # ./resources/artifacts.sh download-disk ${{ env.DISK_PRE_TEST }} test-disk-image-amd64
      # mkdir wkdir
      # cp ${{ env.DISK_PRE_TEST }} wkdir/disk.img


      - name: Install dependencies
        shell: bash
        run: |
          make -f ${{ env.MAKEFILE }} dep_install

      - name: Download the iso file
        shell: bash
        run: |
          make -f ${{ env.MAKEFILE }} download

      - name: Settup the working directory
        shell: bash
        run: |
          make -f ${{ env.MAKEFILE }} build

      - name: Install ubuntu on the disk
        shell: bash
        run: |
          make -f ${{ env.MAKEFILE }} install_no_kvm

      - name: Finalize Disk image
        shell: bash
        run: |
          make -f ${{ env.MAKEFILE }} install_finalize

      - name: Save the image as base image
        shell: bash
        env:
          OUTPUT: ${{ env.DISK_PRE_TEST }}
        run: |
          make -f ${{ env.MAKEFILE }} save_output

      - name: Clean everything
        if: ${{ always() }}
        run: |
          make -f ${{ env.MAKEFILE }} clean


  ## Upload the artifact.



  # # We do this in a separate job as it can be done parallel to the test
  # upload-base-image-artifact:
  #   name: Upload Base Image
  #   runs-on: ubuntu-latest
  #   needs: install-base-image
  #   strategy:
  #     matrix:
  #       ubuntu-version: [ focal, jammy ]

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #     ## Get the cached base disk
  #     - name: Cache Base disk from install job
  #       id: base-disk
  #       uses: actions/cache@v4
  #       with:
  #         path: artifacts/
  #         key: ${{ runner.os }}-${{ github.sha }}-${{ matrix.ubuntu-version }}-base-disk
  #         # key: ${{ runner.os }}-base-disk




      - name: Compress and split
        # if: ${{ matrix.compress == true }}
        run: |
          mkdir temp
          cp ${{ env.DISK_PRE_TEST }} temp/
          ./resources/artifacts.sh compress-split temp/*
          rm temp/disk-image.qcow2

      - name: Upload Base Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: disk-image-${{ matrix.ubuntu-version }}-${{ matrix.arch }}
          path: temp

      - name: Create checksums of the artifacts
        shell: bash
        run: |
          shasum ${{ env.DISK_PRE_TEST }} > ${{ env.CHECKSUMS }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: checksum-${{ matrix.ubuntu-version }}-${{ matrix.arch }}
          path: ${{ env.CHECKSUMS }}


#####################################
### Test base disk image


  base-image-test:
    name: Test and Finalize Base Image
    runs-on: ubuntu-20.04
    needs: install-base-image
    strategy:
      matrix:
        ubuntu-version: [ focal, jammy ]
        arch: [ amd64, arm64 ]

    env:
      FUNCTIONS_UNDER_TEST: "fibonacci-go"
      MAKEFILE: test/Makefile

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      ## Use the cached base disk
      - name: Use base disk cache from install job
        id: base-disk
        uses: actions/cache@v4
        with:
          path: artifacts/
          key: ${{ runner.os }}-${{ github.sha }}-${{ matrix.ubuntu-version }}-${{ matrix.arch }}-base-disk





      # ## Download and cache the other artifacts for the test
      # - name: Cache Build Artifacts after test
      #   id: build-artifacts
      #   uses: actions/cache@v4
      #   with:
      #     path: artifacts/
      #     key: ${{ runner.os }}-${{ github.sha }}-base-disk-tested

      - name: Download latest kernel
        uses: dawidd6/action-download-artifact@v7
        with:
          workflow: build_kernel.yml
          name: vmlinux-${{ matrix.ubuntu-version }}-${{ matrix.arch }}
          path: tmp

      - name: Download latest test client
        uses: dawidd6/action-download-artifact@v7
        with:
          workflow: test_client.yml
          name: test-client-${{ matrix.arch }}
          path: tmp

      - name: Copy artifacts
        run: |
          mkdir -p ${{ env.ARTIFACTS_DIR }}
          cp tmp/kernel ${{ env.KERNEL }}
          cp tmp/test-client ${{ env.CLIENT }}






      ##### Setup Test #####
      - name: Install dependencies
        run: |
          make -f ${{ env.MAKEFILE }} dep_install
          make -f ${{ env.MAKEFILE }} dep_check_qemu


      - name: Create the working directory to run the test.
        env:
          KERNEL: ${{ env.KERNEL }}
          DISK: ${{ env.DISK_PRE_TEST }}
          TEST_CLIENT: ${{ env.CLIENT }}
        run: |
          make -f ${{ env.MAKEFILE }} build


      - name: Run the actual test of the emulator.
        timeout-minutes: 15
        run: |
          make -f ${{ env.MAKEFILE }} run_test_no_kvm


      - name: Check the results file.
        run: |
          make -f ${{ env.MAKEFILE }} check_emu


      # - name: Save the final disk image
      #   shell: bash
      #   env:
      #     OUTPUT: ${{ env.DISK_FINAL }}
      #   run: |
      #     make -f ${{ env.MAKEFILE }} save_output


      - name: Create checksums of the artifacts
        shell: bash
        run: |
          shasum ${{ env.DISK_PRE_TEST }} > ${{ env.CHECKSUMS }}
          shasum ${{ env.KERNEL }} >> ${{ env.CHECKSUMS }}
          shasum ${{ env.CLIENT }} >> ${{ env.CHECKSUMS }}


      - name: Clean everything.
        if: ${{ always() }}
        run: |
          make -f ${{ env.MAKEFILE }} clean




# [
#   {
#     "name": "vmlinux-amd64",
#     "path": ${{ env.KERNEL }}
#   },
#   {
#     "name": "disk-image-amd64",
#     "path": ${{ env.DISK_FINAL }}
#   },
#   {
#     "name": "disk-image-amd64.sums",
#     "path": ${{ env.CHECKSUMS }}
#   },
#   {
#     "name": "test-client",
#     "path": ${{ env.CLIENT }}
#   },
# ]

# [{ "name": "vmlinux-amd64","path": ${{ env.KERNEL }}},{"name": "disk-image-amd64","path": ${{ env.DISK_FINAL }}},{ "name": "disk-image-amd64.sums", "path": ${{ env.CHECKSUMS }}},{"name": "test-client","path": ${{ env.CLIENT }}}]



  # upload-artifacts:
  #   runs-on: ubuntu-latest
  #   # if: needs.build-x86-64.outputs.ansible-matrix
  #   needs: base-image-test
  #   strategy:
  #     fail-fast: false
  #     # max-parallel: 2
  #     matrix:
  #       include:
  #         - name: vmlinux-amd64
  #           path: artifacts/kernel
  #         - name: disk-image-amd64-tested
  #           path: artifacts/disk.qcow2
  #           compress: true
  #         - name: test-client-amd64
  #           path: artifacts/test-client
  #         - name: checksums
  #           path: artifacts/checksums

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Cache Build Artifacts after test
  #       uses: actions/cache@v4
  #       with:
  #         path: artifacts/
  #         key: ${{ runner.os }}-${{ github.sha }}-base-disk-tested

  #     - name: Compress and split
  #       if: ${{ matrix.compress == true }}
  #       run: |
  #         mkdir temp
  #         cp artifacts/disk.qcow2 temp/
  #         ./resources/artifacts.sh compress-split temp/*
  #         rm temp/disk.qcow2


  #     - name: Upload compressed artifact
  #       if: ${{ matrix.compress == true }}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ matrix.name }}
  #         path: temp


  #     - name: Upload artifact
  #       if: ${{ matrix.compress != true }}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ matrix.name }}
  #         path: ${{ matrix.path }}

